<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Cześć, jestem Michał on mdnj</title><link>https://dunajski.github.io/pl/</link><description>Recent content in Cześć, jestem Michał on mdnj</description><generator>Hugo -- 0.147.1</generator><language>pl</language><lastBuildDate>Sat, 03 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://dunajski.github.io/pl/index.xml" rel="self" type="application/rss+xml"/><item><title>Testy CLion z Nucleo G0</title><link>https://dunajski.github.io/pl/posts/2025-05-03-go-clion-post-pl/</link><pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate><guid>https://dunajski.github.io/pl/posts/2025-05-03-go-clion-post-pl/</guid><description>&lt;h2 id="test-clion-w-embedded">Test CLion w Embedded&lt;/h2>
&lt;h3 id="aktualne-doświadczenie-z-różnymi-środowiskami-i-edytorami">Aktualne doświadczenie z różnymi środowiskami i edytorami&lt;/h3>
&lt;p>Ostatnio miałem okazję pracować w środowisku CLion, dlatego postanowiłem przetestować go w kontekście Embedded. Korzystałem z CLion przy mini-projekcie na studia w C++ i pisało się świetnie, więc stwierdziłem, że warto spróbować również w kontekście projektu Embedded. Moje doświadczenia z różnymi IDE do Embedded, takimi jak CubeIDE, CrossStudio, czy VSC z rozszerzeniami, nie były do tej pory zbyt imponujące (były okej, ale zawsze czegoś brakowało). Zwykle korzystam z procesorów STM32. Celem było sprawdzenie, czy CLion ułatwia debugowanie i pisanie kodu (1 IDE bez dodatkowych edytorów). Chciałem też uniknąć korzystania z OpenOCD (nie zawsze wydaję mi się, że jest to stabilne rozwiązanie - mam złe doświadczenia przy debugowaniu Zephyra na Windows).&lt;/p></description></item></channel></rss>